const express = require('express');
const router = express.Router();
const Complaint = require('../models/Complaint');
const authMiddleware = require('../middleware/authMiddleware');
const requireRole = require('../middleware/roleMiddleware');

// ‚ûï –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É (–ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
router.post('/', authMiddleware, async (req, res) => {
  try {
    const { targetId, targetType, message } = req.body;

    const complaint = new Complaint({
      userId: req.user.userId,
      targetId,
      targetType,
      message,
    });

    await complaint.save();
    res.status(201).json({ message: '–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã' });
  }
});

// üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∂–∞–ª–æ–±—ã (–ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
router.get('/my', authMiddleware, async (req, res) => {
  try {
    const complaints = await Complaint.find({ userId: req.user.userId })
      .populate('targetId', 'name email')
      .sort({ createdAt: -1 });

    res.json(complaints);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∂–∞–ª–æ–±' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∂–∞–ª–æ–±—É (–ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
router.delete('/my/:id', authMiddleware, async (req, res) => {
  try {
    const complaint = await Complaint.findOneAndDelete({
      _id: req.params.id,
      userId: req.user.userId,
    });

    if (!complaint) return res.status(404).json({ message: '–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    res.json({ message: '–ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã' });
  }
});


// üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∂–∞–ª–æ–±—ã (—Ç–æ–ª—å–∫–æ admin)
router.get('/', authMiddleware, requireRole('admin'), async (req, res) => {
  try {
    const complaints = await Complaint.find()
      .populate('userId', 'name email')
      .sort({ createdAt: -1 });

    res.json(complaints);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±' });
  }
});

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã (—Ç–æ–ª—å–∫–æ admin)
router.put('/:id', authMiddleware, requireRole('admin'), async (req, res) => {
  try {
    const { status } = req.body;

    const complaint = await Complaint.findById(req.params.id);
    if (!complaint) return res.status(404).json({ message: '–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    complaint.status = status;
    await complaint.save();

    res.json({ message: '–°—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã' });
  }
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—É (—Ç–æ–ª—å–∫–æ admin)
router.delete('/:id', authMiddleware, requireRole('admin'), async (req, res) => {
  try {
    const complaint = await Complaint.findByIdAndDelete(req.params.id);
    if (!complaint) return res.status(404).json({ message: '–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    res.json({ message: '–ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã' });
  }
});

module.exports = router;
