const express = require('express');
const router = express.Router();
const User = require('../models/User');
const authMiddleware = require('../middleware/authMiddleware');
const requireRole = require('../middleware/roleMiddleware');

// üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/users', authMiddleware, requireRole('admin'), async (req, res) => {
  try {
    const users = await User.find().select('-passwordHash');
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

// ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/users/:id/role', authMiddleware, requireRole('admin'), async (req, res) => {
  try {
    const { role } = req.body;

    if (!['tenant', 'landlord', 'admin'].includes(role)) {
      return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å' });
    }

    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    user.role = role;
    await user.save();

    res.json({ message: `–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${role}` });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏' });
  }
});

const Lease = require('../models/Lease');
const Property = require('../models/Property');

router.delete('/users/:id', authMiddleware, requireRole('admin'), async (req, res) => {
  try {
    const userId = req.params.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —É –Ω–µ–≥–æ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç—ã?
    const owns = await Property.exists({ ownerId: userId });
    if (owns) {
      return res.status(400).json({ message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç –æ–±—ä–µ–∫—Ç–∞–º–∏' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–Ω –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä?
    const hasLease = await Lease.exists({ tenantId: userId });
    if (hasLease) {
      return res.status(400).json({ message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞—Ä–µ–Ω–¥–µ' });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await User.findByIdAndDelete(userId);

    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});


// üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏
router.get('/properties', authMiddleware, requireRole('admin'), async (req, res) => {
  try {
    const properties = await Property.find().populate('ownerId', 'name email');
    res.json(properties);
  } catch {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤' });
  }
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç
router.delete('/properties/:id', authMiddleware, requireRole('admin'), async (req, res) => {
  try {
    await Property.findByIdAndDelete(req.params.id);
    res.json({ message: '–û–±—ä–µ–∫—Ç —É–¥–∞–ª—ë–Ω' });
  } catch {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞' });
  }
});

const Complaint = require('../models/Complaint');

// üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∂–∞–ª–æ–±—ã
router.get('/complaints', authMiddleware, requireRole('admin'), async (req, res) => {
  try {
    const complaints = await Complaint.find()
      .populate('userId', 'name email')
      .populate({
        path: 'targetId',
        select: 'title address',
        model: 'Property',
      });

    res.json(complaints);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±' });
  }
});


// ‚ùå –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—É
router.delete('/complaints/:id', authMiddleware, requireRole('admin'), async (req, res) => {
  try {
    await Complaint.findByIdAndDelete(req.params.id);
    res.json({ message: '–ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã' });
  }
});


module.exports = router;
